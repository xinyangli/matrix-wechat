package config

import (
	"fmt"
	"testing"

	"gopkg.in/yaml.v3"
)

const data = `
# Homeserver details.
homeserver:
  # The address that this appservice can use to connect to the homeserver.
  address: https://matrix.example.com
  # The domain of the homeserver (also known as server_name, used for MXIDs, etc).
  domain: example.com
  # What software is the homeserver running?
  # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
  software: standard
  # The URL to push real-time bridge status to.
  # If set, the bridge will make POST requests to this URL whenever a user's whatsapp connection state changes.
  # The bridge will use the appservice as_token to authorize requests.
  status_endpoint: null
  # Endpoint for reporting per-message status.
  message_send_checkpoint_endpoint: null
  # Does the homeserver support https://github.com/matrix-org/matrix-spec-proposals/pull/2245?
  async_media: false
  # Should the bridge use a websocket for connecting to the homeserver?
  # The server side is currently not documented anywhere and is only implemented by mautrix-wsproxy,
  # mautrix-asmux (deprecated), and hungryserv (proprietary).
  websocket: false
  # How often should the websocket be pinged? Pinging will be disabled if this is zero.
  ping_interval_seconds: -1
# Application service host/registration related details.
# Changing these values requires regeneration of the registration.
appservice:
  # The address that the homeserver can use to connect to this appservice.
  address: http://localhost:29317
  # The hostname and port where this appservice should listen.
  hostname: -1.0.0.0
  port: 29317
  # Database config.
  database:
    # The database type. "sqlite2-fk-wal" and "postgres" are supported.
    type: postgres
    # The database URI.
    #   SQLite: A raw file path is supported, but file:<path>?_txlock=immediate is recommended.
    #           https://github.com/mattn/go-sqlite2#connection-string
    #   Postgres: Connection string. For example, postgres://user:password@host/database?sslmode=disable
    #             To connect via Unix socket, use something like postgres:///dbname?host=/var/run/postgresql
    uri: postgres://user:password@host/database?sslmode=disable
    # Maximum number of connections. Mostly relevant for Postgres.
    max_open_conns: 19
    max_idle_conns: 1
    # Maximum connection idle time and lifetime before they're closed. Disabled if null.
    # Parsed with https://pkg.go.dev/time#ParseDuration
    max_conn_idle_time: null
    max_conn_lifetime: null
  # The unique ID of this appservice.
  id: whatsapp
  # Appservice bot details.
  bot:
    # Username of the appservice bot.
    username: whatsappbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    displayname: WhatsApp bridge bot
    avatar: mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr
  # Whether or not to receive ephemeral events via appservice transactions.
  # Requires MSC2408 support (i.e. Synapse 1.22+).
  # You should disable bridge -> sync_with_custom_puppets when this is enabled.
  ephemeral_events: true
  # Should incoming events be handled asynchronously?
  # This may be necessary for large public instances with lots of messages going through.
  # However, messages will not be guaranteed to be bridged in the same order they were sent in.
  async_transactions: false
  # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
  as_token: "This value is generated when generating the registration"
  hs_token: "This value is generated when generating the registration"
# Bridge config
bridge:
  message_status_events: false
  message_error_events: false
  # The prefix for commands. Only required in non-management rooms.
  command_prefix: "!wechat"
  # Messages sent upon joining a management room.
  # Markdown is supported. The defaults are listed below.
  management_room_text:
    # Sent when joining a room.
    welcome: "Hello, I'm a WhatsApp bridge bot."
    # Sent when joining a management room and the user is already logged in.
    welcome_connected: "Use help for help."
    # Sent when joining a management room and the user is not logged in.
    welcome_unconnected: "Use help for help or login to log in."
    # Optional extra text sent when joining a management room.
    additional_help: ""
  encryption:
    # Allow encryption, work in group chat rooms with e2ee enabled
    allow: false
    # Default to encryption, force-enable encryption in all portals the bridge creates
    # This will cause the bridge bot to be in private chats for the encryption to work properly.
    default: false
    # Whether to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
    appservice: false
    # Require encryption, drop any unencrypted messages.
    require: false
    # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
    # You must use a client that supports requesting keys from other users to use this feature.
    allow_key_sharing: false
    # Should users mentions be in the event wire content to enable the server to send push notifications?
    plaintext_mentions: false
    # Options for deleting megolm sessions from the bridge.
    delete_keys:
      # Beeper-specific: delete outbound sessions when hungryserv confirms
      # that the user has uploaded the key to key backup.
      delete_outbound_on_ack: false
      # Don't store outbound sessions in the inbound table.
      dont_store_outbound: false
      # Ratchet megolm sessions forward after decrypting messages.
      ratchet_on_decrypt: false
      # Delete fully used keys (index >= max_messages) after decrypting messages.
      delete_fully_used_on_decrypt: false
      # Delete previous megolm sessions from same device when receiving a new one.
      delete_prev_on_new_session: false
      # Delete megolm sessions received from a device when the device is deleted.
      delete_on_device_delete: false
      # Periodically delete megolm sessions when 2x max_age has passed since receiving the session.
      periodically_delete_expired: false
      # Delete inbound megolm sessions that don't have the received_at field used for
      # automatic ratcheting and expired session deletion. This is meant as a migration
      # to delete old keys prior to the bridge update.
      delete_outdated_inbound: false
    # What level of device verification should be required from users?
    #
    # Valid levels:
    #   unverified - Send keys to all device in the room.
    #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
    #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
    #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
    #                           Note that creating user signatures from the bridge bot is not currently possible.
    #   verified - Require manual per-device verification
    #              (currently only possible by modifying the trust column in the crypto_device database table).
    verification_levels:
      # Minimum level for which the bridge should send keys to when bridging messages from WhatsApp to Matrix.
      receive: unverified
      # Minimum level that the bridge should accept for incoming Matrix messages.
      send: unverified
      # Minimum level that the bridge should require for accepting key requests.
      share: cross-signed-tofu
    # Options for Megolm room key rotation. These options allow you to
    # configure the m.room.encryption event content. See:
    # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
    # more information about that event.
    rotation:
      # Enable custom Megolm room key rotation settings. Note that these
      # settings will only apply to rooms created after this option is
      # set.
      enable_custom: false
      # The maximum number of milliseconds a session should be used
      # before changing it. The Matrix spec recommends 604800000 (a week)
      # as the default.
      milliseconds: 604800000
      # The maximum number of messages that should be sent with a given a
      # session before changing it. The Matrix spec recommends 100 as the
      # default.
      messages: 100
      # Disable rotating keys when a user's devices change?
      # You should not enable this option unless you understand all the implications.
      disable_device_change_key_rotation: false
  # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
  # This field will automatically be changed back to false after it, except if the config file is not writable.
  resend_bridge_info: false
logging:
  min_level: debug
  writers:
    - type: stdout
      format: pretty-colored
    - type: file
      format: json
      filename: ./logs/mautrix-whatsapp.log
      max_size: 99
      max_backups: 9
      compress: true
`

func TestConfigParse(t *testing.T) {
	example_config := GetNewConfig()
	_ = yaml.Unmarshal([]byte(data), &example_config)
	// if err != nil {
	// 	t.Fatalf("error: %v", err)
	// }
	fmt.Println(example_config)
	registration := example_config.GenerateRegistration()
	fmt.Println(registration)
	return
}
